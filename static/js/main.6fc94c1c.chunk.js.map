{"version":3,"sources":["components/Container/index.js","components/Row/index.js","components/Column/index.js","components/CharacterCard/index.js","components/Jumbotron/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Row","row","Column","column","CharacterCard","onClick","src","image","alt","Jumbotron","Navbar","App","state","characters","score","highScore","clickedCharacters","shuffleCards","handleClick","bind","character","this","checkWinLose","cardArray","i","length","j","Math","floor","random","currentCharacters","newCharacters","shuffle","setState","id","isAlreadyClicked","find","storedId","console","log","gameLose","incrementScore","gameWon","concat","push","resetGame","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6fc94c1c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nexport default function Container(props) {\n    return (\n        <div className=\"container\">\n            {props.children}\n        </div>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Row(props) {\n    return (\n        <div className={props.row}>\n            {props.children}\n        </div>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Column (props) {\n    return (\n        <div className={props.column}>\n        {props.children}\n        </div>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function CharacterCard(props) {\n    return (\n\n        <div>\n            <img onClick={props.onClick} src={props.image} className=\"card-img-top img-shake\" alt=\"...\" />\n        </div>\n\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Jumbotron(props) {\n    return (\n        <div className=\"jumbotron\" >\n            \n               <h3 className=\"text-center\">{props.children}</h3>\n           \n        </div>\n    )\n}","import React from \"react\"\nimport \"./style.css\"\n\nexport default function Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg text-center\">\n            <h3 className=\"text-center\">{props.children}</h3>\n\n\n        </nav>\n    )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row\";\nimport Column from \"./components/Column\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\nimport Jumbotron from \"./components/Jumbotron\"\nimport Navbar from \"./components/Navbar\"\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      characters,\n      score: 0,\n      highScore: 0,\n      clickedCharacters: []\n    }\n    this.shuffleCards();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(character) {\n    this.checkWinLose(character);\n\n  }\n\n  shuffle(cardArray) {\n    for (let i = cardArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cardArray[i], cardArray[j]] = [cardArray[j], cardArray[i]];\n    }\n    return cardArray;\n  }\n\n  shuffleCards() {\n    const currentCharacters = this.state.characters;\n    const newCharacters = this.shuffle(currentCharacters);\n    this.setState({ characters: newCharacters })\n  }\n\n  incrementScore() {\n    if (this.state.score === this.state.highScore) {\n      this.setState({ highScore: this.state.highScore + 1 });\n      this.setState({ score: this.state.score + 1 });\n    }\n    else {\n      this.setState({ score: this.state.score + 1 });\n    }\n  }\n\n  checkWinLose(character) {\n    const { id } = character;\n    const isAlreadyClicked = this.state.clickedCharacters.find(storedId => {\n      console.log(\"stored: \", storedId);\n      console.log(\"id: \", id);\n      return storedId === id;\n\n\n    });\n    console.log(\"Already clicked?: \", isAlreadyClicked)\n    if (isAlreadyClicked) {\n      this.gameLose();\n    }\n    else if (this.state.score === 11) {\n      this.incrementScore();\n      this.gameWon();\n    }\n    else {\n      let { clickedCharacters } = this.state;\n      clickedCharacters = [].concat(clickedCharacters);\n      clickedCharacters.push(id);\n      this.setState({ clickedCharacters });\n      this.incrementScore();\n      this.shuffleCards();\n\n    }\n    console.log(\"clicked characters check win: \", this.state.clickedCharacters)\n  }\n\n  resetGame() {\n    this.setState({\n      score: 0,\n      clickedCharacters: []\n    });\n\n  }\n\n  gameWon() {\n    this.resetGame();\n  }\n\n  gameLose() {\n    \n    this.resetGame();\n  }\n\n  render() {\n    return (\n      <Container>\n        <Navbar>\n          <div>\n          <h2 className=\"text-center\">Tiger King Clicky Game</h2>\n          </div>\n        </Navbar>\n        <Jumbotron >\n\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n      <h3>SCORE: {this.state.score} | HIGH SCORE: {this.state.highScore}</h3>\n        </Jumbotron>\n        <Row row=\"row justify-content-md-center\">\n          {this.state.characters.map(character => {\n            return (\n              <Column column=\"col-sm-3-auto\">\n                <CharacterCard\n\n                  image={character.image}\n                  onClick={() => {\n                    this.handleClick(character)\n                  }\n                  }\n                />\n              </Column>\n            )\n          })}\n        </Row>\n        <div >\n          <img id=\"joe-exotic\" src=\"https://i.imgur.com/1kVDbj8.png\" />\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}